#! /bin/bash

# Source local phy++ configuration if running from root ("sudo" only)
if [ -z "${PHYPP_COMPILER}" ]; then
    if [ "$(id -u)" -eq "0" ]; then
        if [ ! -z "${SUDO_USER}" ]; then
            eval source "~${SUDO_USER}/.phypprc"
        fi
    fi
fi

if [ -z "${PHYPP_COMPILER}" ]; then
    echo "error: the phy++ library is not installed for this user"
    exit
fi

T="$(date +%s%N)"

DEBUG=0
OPTIMIZE=0
PROFILE=0
TIME=0
FILE=''
OUTPUT=''
NEXT_IS_OUTPUT=0

for arg in "$@"; do
    if [ ${NEXT_IS_OUTPUT} -eq 1 ]; then
        OUTPUT="${arg}"
        NEXT_IS_OUTPUT=0
    else
        if [ "${arg}" = "debug" ]; then
            DEBUG=1
        elif [ "${arg}" = "optimize" ]; then
            OPTIMIZE=1
        elif [ "${arg}" = "profile" ]; then
            PROFILE=1
        elif [ "${arg}" = "time" ]; then
            TIME=1
        elif [ "${arg}" = "-o" ]; then
            NEXT_IS_OUTPUT=1
        else
            if [ -n "${FILE}" ]; then
                echo "error: cannot compile multiple files at the same time"
                exit 1
            fi
            FILE="${arg}"
        fi
    fi
done

if [ ${NEXT_IS_OUTPUT} -eq 1 ]; then
    echo "error: missing output file name after '-o'"
    exit 1
fi

FILE_DIR="$(dirname "${FILE}")"
PROG="$(basename "${FILE}" .cpp)"

if [ -z "${OUTPUT}" ]; then
    OUTPUT="${FILE_DIR}/${PROG}"
fi

OPTIONS="${PHYPP_INCLUDE_DIR} ${PHYPP_COMPILER_FLAGS}"
if [ ${DEBUG} -eq 1 ]; then
    OPTIONS="${OPTIONS} ${PHYPP_COMPILER_DEBUG_FLAGS}"
fi
if [ ${OPTIMIZE} -eq 1 ]; then
    OPTIONS="${OPTIONS} ${PHYPP_COMPILER_OPT_FLAGS}"
fi
if [ ${PROFILE} -eq 1 ]; then
    OPTIONS="${OPTIONS} ${PHYPP_COMPILER_PROF_FLAGS}"
fi

T="$(date +%s%N)"

if [ ${PHYPP_DISABLE_REFLECTION} -eq 0 ]; then
    TMP_OUTPUT="${PHYPP_TEMP_DIR}/._reflex_$(basename "${FILE}")"

    # Parse file and generate reflection data
    if [ ${PHYPP_SHOW_CMD} -eq 1 ]; then
        echo ${PHYPP_REFGEN} "${FILE}" "${TMP_OUTPUT}" -I"${FILE_DIR}" ${PHYPP_INCLUDE_DIR} $PHYPP_REFGEN_FLAGS
    fi

    ${PHYPP_REFGEN} "${FILE}" "${TMP_OUTPUT}" -I"${FILE_DIR}" ${PHYPP_INCLUDE_DIR} $PHYPP_REFGEN_FLAGS

    if [ $? -ne 0 ]; then
        echo "phy++: program '${PROG}' FAILED to compile"
        exit 1
    fi
    if [ ${TIME} -eq 1 ]; then
        TT="$(($(date +%s%N)-T))"
        S="$((TT/1000000000))"
        M="$((TT/1000000))"

        printf "phy++: reflection data generated (%02d:%02d.%03d)\n" \
            "$((S/60%60))" "$((S%60))" "${M}"
    fi
else
    TMP_OUTPUT="${FILE}"
fi

# Compile the generated file to build the final executable
if [ ${PHYPP_SHOW_CMD} -eq 1 ]; then
    echo ${PHYPP_COMPILER} "${TMP_OUTPUT}" -I"${FILE_DIR}" ${OPTIONS} -o "${OUTPUT}"
fi

${PHYPP_COMPILER} "${TMP_OUTPUT}" -I"${FILE_DIR}" ${OPTIONS} -o "${OUTPUT}"

if [ $? -ne 0 ]; then
    echo "phy++: program '${PROG}' FAILED to compile"
    exit 1
fi
if [ ${TIME} -eq 1 ]; then
    TT="$(($(date +%s%N)-T))"
    S="$((TT/1000000000))"
    M="$((TT/1000000))"

    printf "phy++: program '${PROG}' successfully compiled (%02d:%02d.%03d)\n" \
        "$((S/60%60))" "$((S%60))" "${M}"
fi
