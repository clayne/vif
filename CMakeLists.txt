cmake_minimum_required(VERSION 2.6...4.0)
project(vif)

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "No build type selected, default to Release (-DCMAKE_BUILD_TYPE=...)")
    set(CMAKE_BUILD_TYPE "Release")
endif()

set(VIF_COMPILER_FLAGS "" CACHE INTERNAL "")
set(REFGEN_COMPILER_FLAGS "" CACHE INTERNAL "")

function(handle_options OPTS USAGE)
    if("${USAGE}" STREQUAL "COMPILER")
        add_definitions(${OPTS})
        set(VIF_COMPILER_FLAGS "${VIF_COMPILER_FLAGS} ${OPTS}" CACHE INTERNAL "")
    else()
        set(REFGEN_COMPILER_FLAGS "${REFGEN_COMPILER_FLAGS} ${OPTS}" CACHE INTERNAL "")
    endif()
endfunction()

function(handle_clang_options CVERSION USAGE)
    handle_options(-Weverything ${USAGE})
    handle_options(-Wno-c++98-compat-pedantic ${USAGE})
    handle_options(-Wno-c++98-compat ${USAGE})
    handle_options(-Wno-unused-parameter ${USAGE})
    handle_options(-Wno-sign-conversion ${USAGE})
    handle_options(-Wno-conversion ${USAGE})
    handle_options(-Wno-missing-variable-declarations ${USAGE})
    handle_options(-Wno-missing-prototypes ${USAGE})
    handle_options(-Wno-padded ${USAGE})
    handle_options(-Wno-float-equal ${USAGE})
    handle_options(-Wno-unused-variable ${USAGE})
    handle_options(-Wno-global-constructors ${USAGE})
    handle_options(-Wno-exit-time-destructors ${USAGE})
    handle_options(-Wno-weak-vtables ${USAGE})
    handle_options(-Wno-covered-switch-default ${USAGE})
    handle_options(-Wno-documentation-unknown-command ${USAGE})
    handle_options(-Wno-unneeded-internal-declaration ${USAGE})
    handle_options(-Wno-unused-function ${USAGE})
    handle_options(-Wno-unused-macros ${USAGE})

    if(NOT (CVERSION VERSION_LESS 3.5))
        handle_options(-Wno-old-style-cast ${USAGE})
    endif()
    if(NOT (CVERSION VERSION_LESS 3.8))
        handle_options(-Wno-double-promotion ${USAGE})
    endif()

    handle_options(-std=c++11 ${USAGE})
    handle_options(-ftemplate-backtrace-limit=0 ${USAGE})
    handle_options(-ferror-limit=5 ${USAGE})
endfunction()

function(handle_gcc_options CVERSION USAGE)
    handle_options(-Wall ${USAGE})
    handle_options(-std=c++11 ${USAGE})
    handle_options(-fmax-errors=5 ${USAGE})
endfunction()

function(handle_intel_options CVERSION USAGE)
    handle_options(-Wall ${USAGE})
    handle_options(-std=c++11 ${USAGE})
    handle_options(-diag-error-limit=5 ${USAGE})
endfunction()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.3))
        message(STATUS "clang version >= 3.3 (${CMAKE_CXX_COMPILER_VERSION})")
    else()
        message(FATAL_ERROR "vif requires advanced features from the C++11 norm that are only available with clang 3.3 or higher (your version: ${CMAKE_CXX_COMPILER_VERSION}). Please upgrade your compiler.")
    endif()

    handle_clang_options(${CMAKE_CXX_COMPILER_VERSION} "COMPILER")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if ("${CMAKE_CXX_COMPILER_VERSION}" STREQUAL "")
        message(WARNING "could not figure out the version of gcc, let's hope it is >= 4.7")
    else()
        if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7))
            message(STATUS "gcc version >= 4.7 (${CMAKE_CXX_COMPILER_VERSION})")
        else()
            message(FATAL_ERROR "vif requires advanced features from the C++11 norm that are only available with gcc 4.7 or higher (your version: ${CMAKE_CXX_COMPILER_VERSION}). Please upgrade your compiler.")
        endif()
    endif()

    handle_gcc_options(${CMAKE_CXX_COMPILER_VERSION} "COMPILER")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    if ("${CMAKE_CXX_COMPILER_VERSION}" STREQUAL "")
        message(WARNING "could not figure out the version of Intel compiler, let's hope it is >= 14")
    else()
        if(NOT (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 14))
            message(STATUS "Intel version >= 14 (${CMAKE_CXX_COMPILER_VERSION})")
        else()
            message(FATAL_ERROR "vif requires advanced features from the C++11 norm that are only available with Intel compiler 14 or higher (your version: ${CMAKE_CXX_COMPILER_VERSION}). Please upgrade your compiler.")
        endif()
    endif()

    handle_intel_options(${CMAKE_CXX_COMPILER_VERSION} "COMPILER")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  message(ERROR "Microsoft Visual C++ compiler is not supported")
endif()

set(VIF_INCLUDES "${PROJECT_SOURCE_DIR}/include")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake")

# find required libraries
find_package(Threads REQUIRED)

# find optional libraries
if (NOT NO_CFITSIO)
    find_package(CFITSIO)
endif()
if (NOT NO_LIBUNWIND)
    find_package(LibUnwind)
endif()
if (NOT NO_LIBDWARF)
    find_package(LibElf)
    find_package(LibDwarf)
endif()
if (NOT NO_REFLECTION)
    find_package(LibClang 3)
endif()
if (NOT NO_FFTW)
    find_package(FFTW 3)
endif()
if (NOT NO_PROFILER OR NOT NO_TCMALLOC)
    find_package(GooglePerfTools)
endif()
if (NOT NO_LAPACK)
    find_package(LAPACK)
endif()
if (NOT NO_GSL AND NOT NO_LAPACK)
    find_package(GSL)
endif()
if (NOT NO_WCSLIB)
    find_package(WCSLib)
endif()

set(VIF_ADD_COMPILER_FLAGS "")
set(REFGEN_ADD_COMPILER_FLAGS "")
set(VIF_ADD_OPT_COMPILER_FLAGS "")
set(DEPENDENCIES_INCLUDES "")
set(DEPENDENCIES_LIBS "")

# handle conditional reflection support
if (NOT CLANG_FOUND AND NOT NO_REFLECTION)
    message("note: the clang library could not be found: reflection of C++ structures will not be possible, but apart from that the library will function properly")
endif()
if (NO_REFLECTION)
    message("note: the clang library has been disabled: reflection of C++ structures will not be possible, but apart from that the library will function properly")
endif()
if (NOT CLANG_FOUND OR NO_REFLECTION)
    set(NO_REFLECTION 1)
    add_definitions(-DNO_REFLECTION)
else()
    handle_clang_options(${CLANG_VERSION} "REFGEN")
endif()

# handle conditional CFITSIO support
if (NOT CFITSIO_FOUND AND NOT NO_CFITSIO)
    message("note: the CFITSIO library could not be found: FITS file input/output will not be supported, but apart from that the library will function properly")
endif()
if (NO_CFITSIO)
    message("note: the CFITSIO library has been disabled: FITS file input/output will not be supported, but apart from that the library will function properly")
endif()
if (NOT CFITSIO_FOUND OR NO_CFITSIO)
    add_definitions(-DNO_CFITSIO)
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DNO_CFITSIO")
    set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DNO_CFITSIO")
else()
    set(DEPENDENCIES_INCLUDES "${DEPENDENCIES_INCLUDES} -I${CFITSIO_INCLUDES}")

    foreach(ITEM ${CFITSIO_LIBRARIES})
        set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} ${ITEM}")
        get_filename_component(LIBCFITSIO_LIB_DIR ${ITEM} PATH)
        set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${LIBCFITSIO_LIB_DIR}")
    endforeach()
endif()

# handle conditional LAPACK support
if (NOT LAPACK_FOUND AND NOT NO_LAPACK)
    message("note: the LAPACK library could not be found: certain mathematical functions will not be available, but apart from that the library will function properly")
endif()
if (NO_LAPACK)
    message("note: the LAPACK library has been disabled: certain mathematical functions will not be available, but apart from that the library will function properly")
endif()
if (NOT LAPACK_FOUND OR NO_LAPACK)
    add_definitions(-DNO_LAPACK)
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DNO_LAPACK")
    set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DNO_LAPACK")
else()
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -llapack")

    foreach(ITEM ${LAPACK_LIBRARIES})
        get_filename_component(LAPACK_LIB_DIR ${ITEM} PATH)
        set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${LAPACK_LIB_DIR}")
    endforeach()
endif()

# handle conditional GSL support
if (NOT GSL_FOUND AND (NOT NO_GSL AND NOT NO_LAPACK))
    message("note: the GSL library could not be found: certain mathematical functions will not be available, but apart from that the library will function properly")
endif()
if (NO_GSL OR NO_LAPACK OR NOT LAPACK_FOUND)
    message("note: the GSL library has been disabled: certain mathematical functions will not be available, but apart from that the library will function properly")
endif()
if (NOT GSL_FOUND OR NO_GSL OR NO_LAPACK OR NOT LAPACK_FOUND)
    add_definitions(-DNO_GSL)
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DNO_GSL")
    set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DNO_GSL")
else()
    set(DEPENDENCIES_INCLUDES "${DEPENDENCIES_INCLUDES} -I${GSL_INCLUDE_DIRS}")

    foreach(ITEM ${GSL_LIBRARIES})
        set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} ${ITEM}")
    endforeach()

    set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${GSL_LIBRARY_DIRS}")
endif()

# handle conditional WCSLib support
if (NOT WCSLIB_FOUND AND NOT NO_WCSLIB)
    message("note: the WCSLib library could not be found: FITS astrometry functions will not be available, but apart from that the library will function properly")
endif()
if (NO_WCSLIB OR NO_CFITSIO)
    message("note: the WCSLib library has been disabled: FITS astrometry functions will not be available, but apart from that the library will function properly")
endif()
if (NOT WCSLIB_FOUND OR NO_WCSLIB OR NO_CFITSIO)
    add_definitions(-DNO_WCSLIB)
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DNO_WCSLIB")
    set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DNO_WCSLIB")
else()
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -lwcs")
    set(DEPENDENCIES_INCLUDES "${DEPENDENCIES_INCLUDES} -I${WCSLIB_INCLUDE_DIR}")

    if (WCSLIB_VERSION_STRING VERSION_LESS 5.0)
        add_definitions(-DWCSLIB_NO_DIS)
        set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DWCSLIB_NO_DIS")
        set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DWCSLIB_NO_DIS")
    endif()

    list(GET WCSLIB_LIBRARIES 0 WCSLIB_LIB)
    get_filename_component(WCSLIB_LIB_DIR ${WCSLIB_LIB} PATH)
    set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${WCSLIB_LIB_DIR}")
endif()

# handle conditional FFTW support
if (NOT FFTW_FOUND AND NOT NO_FFTW)
    message("note: the FFTW library cound not be found: certain mathematical functions will be slow, but apart from that the library will function properly")
endif()
if (NO_FFTW)
    message("note: the FFTW library has been disabled: certain mathematical functions will be slow, but apart from that the library will function properly")
endif()
if (NOT FFTW_FOUND OR NO_FFTW)
    add_definitions(-DNO_FFTW)
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DNO_FFTW")
    set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DNO_FFTW")
else()
    set(DEPENDENCIES_INCLUDES "${DEPENDENCIES_INCLUDES} -I${FFTW_INCLUDES}")
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -lfftw3")

    foreach(ITEM ${FFTW_LIBRARIES})
        get_filename_component(FFTW_LIB_DIR ${ITEM} PATH)
        set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${FFTW_LIB_DIR}")
    endforeach()
endif()

# handle conditional LibUnwind support
if (NOT LIBUNWIND_FOUND AND NOT NO_LIBUNWIND)
    message("note: the libunwind library cound not be found: error messages will not print the stack trace, but apart from that the library will function properly")
endif()
if (NO_LIBUNWIND)
    message("note: the libunwind library has been disabled: error messages will not print the stack trace, but apart from that the library will function properly")
endif()
if (NOT LIBUNWIND_FOUND OR NO_LIBUNWIND)
    set(NO_UNWIND 1)
    add_definitions(-DNO_LIBUNWIND)
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DNO_LIBUNWIND")
    set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DNO_LIBUNWIND")
else()
    set(NO_UNWIND 0)
    set(DEPENDENCIES_INCLUDES "${DEPENDENCIES_INCLUDES} -I${LIBUNWIND_INCLUDE_DIR}")
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -lunwind")
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -lunwind-${LIBUNWIND_ARCH}")

    foreach(ITEM ${LIBUNWIND_LIBRARIES})
        get_filename_component(LIBUNWIND_LIB_DIR ${ITEM} PATH)
        set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${LIBUNWIND_LIB_DIR}")
    endforeach()
endif()

if (NOT NO_UNWIND)
    # handle conditional LibDwarf support
    if (NOT LIBELF_FOUND AND NOT NO_LIBDWARF)
        message("note: the libelf library cound not be found: stack trace in error messages will not have file+line information, but apart from that the library will function properly")
    endif()
    if (NOT LIBDWARF_FOUND AND NOT NO_LIBDWARF)
        message("note: the libdwarf library cound not be found: stack trace in error messages will not have file+line information, but apart from that the library will function properly")
    endif()
    if (NO_LIBDWARF)
        message("note: the libdwarf library has been disabled: stack trace in error messages will not have file+line information, but apart from that the library will function properly")
    endif()
endif()

if (NO_UNWIND OR NOT LIBELF_FOUND OR NOT LIBDWARF_FOUND OR NO_LIBDWARF)
    add_definitions(-DNO_LIBDWARF)
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -DNO_LIBDWARF")
    set(REFGEN_ADD_COMPILER_FLAGS "${REFGEN_ADD_COMPILER_FLAGS} -DNO_LIBDWARF")
else()
    set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -ldwarf -lelf")
    foreach(ITEM ${LIBDWARF_INCLUDE_DIRS})
        set(DEPENDENCIES_INCLUDES "${DEPENDENCIES_INCLUDES} -I${ITEM}")
    endforeach()

    foreach(ITEM ${LIBDWARF_LIBRARIES})
        get_filename_component(LIBDWARF_LIB_DIR ${ITEM} PATH)
        set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${LIBDWARF_LIB_DIR}")
    endforeach()
    foreach(ITEM ${LIBELF_LIBRARIES})
        get_filename_component(LIBELF_LIB_DIR ${ITEM} PATH)
        set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${LIBELF_LIB_DIR}")
    endforeach()
endif()

# handle conditional Google perftools support
if (NOT TCMALLOC_LIBRARY)
    message("note: could not find Google's tcmalloc library: installing this library will make vif programs slightly faster")
endif()
if (NO_TCMALLOC)
    message("note: the tcmalloc library has been disabled: vif programs will run slightly slower, but apart from that the library will function properly")
endif()
if (NOT TCMALLOC_LIBRARY OR NO_TCMALLOC)
    # nothing to do
else()
    set(VIF_ADD_OPT_COMPILER_FLAGS "${VIF_ADD_OPT_COMPILER_FLAGS} -ltcmalloc")
    set(DEPENDENCIES_INCLUDES "${DEPENDENCIES_INCLUDES} -I${GOOGLE_PERFTOOLS_INCLUDE_DIR}")

    get_filename_component(GOOGLE_PERFTOOLS_LIB_DIR ${TCMALLOC_LIBRARY} PATH)
    set(DEPENDENCIES_LIBS "${DEPENDENCIES_LIBS} -L${GOOGLE_PERFTOOLS_LIB_DIR}")
endif()

if (NOT PROFILER_LIBRARY)
    message("note: could not find Google's profiler library: will not be able to profile vif programs, but apart from that the library will function properly")
endif()
if (NO_PROFILER)
    message("note: the profiler library has been disabled: will not be able to profile vif programs, but apart from that the library will function properly")
endif()

if (NOT PROFILER_LIBRARY OR NO_PROFILER)
    set(NO_PROFILER 1)
else()
    set(NO_PROFILER 0)
endif()

# build the refgen tool
if (NOT NO_REFLECTION)
    set(NO_REFLECTION 0)
    add_subdirectory(tools/refgen)
endif()

# handle pthread (mandatory for std::thread in Unix)
set(VIF_ADD_COMPILER_FLAGS "${VIF_ADD_COMPILER_FLAGS} -pthread")

# make sure the destination folder is clean before installing there
# this will remove headers that were moved by a refactoring
install(CODE "message(\"-- Deleting:   ${CMAKE_INSTALL_PREFIX}/include/vif\")")
install(CODE "file(REMOVE_RECURSE ${CMAKE_INSTALL_PREFIX}/include/vif)")

# install headers
install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/vif/ DESTINATION include/vif
    FILES_MATCHING PATTERN "*.hpp")
install(FILES ${PROJECT_SOURCE_DIR}/include/vif.hpp DESTINATION include)

# install build scripts
install(PROGRAMS ${PROJECT_SOURCE_DIR}/bin/vif ${PROJECT_SOURCE_DIR}/bin/ovif
    ${PROJECT_SOURCE_DIR}/bin/gvif ${PROJECT_SOURCE_DIR}/bin/govif
    ${PROJECT_SOURCE_DIR}/bin/cvif
    DESTINATION bin COMPONENT scripts)
if (PROFILER_LIBRARIES)
    install(PROGRAMS ${PROJECT_SOURCE_DIR}/bin/provif DESTINATION bin COMPONENT scripts)
endif()

# build configuration
if (NOT VIF_INPLACE_BUILD)
    set(VIF_OUTPUT_CONFIG_FILE ".vifrc")
    set(VIF_OUTPUT_CONFIG "${CMAKE_BINARY_DIR}/${VIF_OUTPUT_CONFIG_FILE}")
    file(WRITE ${VIF_OUTPUT_CONFIG} "# vif configuration file\n\n")

    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_SHOW_CMD=0\n\n")

    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_DISABLE_REFLECTION=${NO_REFLECTION}\n\n")

    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_INCLUDE_DIR=-I\"${CMAKE_INSTALL_PREFIX}/include\"\n")

    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_PATH=\"${PROJECT_SOURCE_DIR}\"/\n")
    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_DATA_DIR=\"\${VIF_PATH}data/\"\n")
    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_TMP_DIR=\"/tmp/\"\n\n")

    if (NOT NO_REFLECTION)
        file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_REFGEN=\"${CMAKE_INSTALL_PREFIX}/bin/vif-refgen\"\n")
        file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_TEMP_DIR=\"/tmp/\"\n")
        file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_REFGEN_FLAGS=\"-DDISABLE_REFLECTION -isystem ${CLANG_SYSTEM_INCLUDE} ${REFGEN_COMPILER_FLAGS} ${DEPENDENCIES_INCLUDES} ${REFGEN_ADD_COMPILER_FLAGS}\"\n\n")
    endif()

    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_COMPILER=\"${CMAKE_CXX_COMPILER}\"\n")

    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_COMPILER_FLAGS=\"-g ${VIF_COMPILER_FLAGS} ${DEPENDENCIES_INCLUDES} ${DEPENDENCIES_LIBS} ${VIF_ADD_COMPILER_FLAGS}\"\n")
    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_COMPILER_DEBUG_FLAGS=\n")
    file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_COMPILER_OPT_FLAGS=\"-O3 ${VIF_ADD_OPT_COMPILER_FLAGS}\"\n")
    if (NOT NO_PROFILER)
        file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_COMPILER_PROF_FLAGS=-lprofiler\n")
        file(APPEND ${VIF_OUTPUT_CONFIG} "export VIF_PROFILER=\"${PROFILER_BINARY}\"\n")
    endif()

    file(APPEND ${VIF_OUTPUT_CONFIG} "if [ \${VIF_DISABLE_REFLECTION} -eq 1 ]; then\n")
    file(APPEND ${VIF_OUTPUT_CONFIG} "    export VIF_COMPILER_FLAGS=\"-DNO_REFLECTION \${VIF_COMPILER_FLAGS}\"\n")
    file(APPEND ${VIF_OUTPUT_CONFIG} "fi\n")

    # install config
    if (NOT VIFRC_DIR)
        set(VIFRC_DIR $ENV{HOME})
    endif()
    message(STATUS "vif configuration environment will be installed in ${VIFRC_DIR}")
    install(FILES ${VIF_OUTPUT_CONFIG} DESTINATION ${VIFRC_DIR} COMPONENT config)
    install(CODE "message(\"note: to finalize the installation, please source ${VIFRC_DIR}/${VIF_OUTPUT_CONFIG_FILE} in your startup script (~/.bashrc).\")")
endif()
